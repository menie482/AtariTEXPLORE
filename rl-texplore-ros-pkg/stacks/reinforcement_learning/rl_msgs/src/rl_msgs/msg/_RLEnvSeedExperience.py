"""autogenerated by genpy from rl_msgs/RLEnvSeedExperience.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RLEnvSeedExperience(genpy.Message):
  _md5sum = "e195f7b7c1a41138d96a4af2de05b1b1"
  _type = "rl_msgs/RLEnvSeedExperience"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Message that contains a seed experience to initialize the model
float32[] from_state
int32     action
float32[] to_state
float32   reward
bool      terminal


"""
  __slots__ = ['from_state','action','to_state','reward','terminal']
  _slot_types = ['float32[]','int32','float32[]','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       from_state,action,to_state,reward,terminal

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RLEnvSeedExperience, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.from_state is None:
        self.from_state = []
      if self.action is None:
        self.action = 0
      if self.to_state is None:
        self.to_state = []
      if self.reward is None:
        self.reward = 0.
      if self.terminal is None:
        self.terminal = False
    else:
      self.from_state = []
      self.action = 0
      self.to_state = []
      self.reward = 0.
      self.terminal = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.from_state)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.from_state))
      buff.write(_struct_i.pack(self.action))
      length = len(self.to_state)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.to_state))
      _x = self
      buff.write(_struct_fB.pack(_x.reward, _x.terminal))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.from_state = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (self.action,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.to_state = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 5
      (_x.reward, _x.terminal,) = _struct_fB.unpack(str[start:end])
      self.terminal = bool(self.terminal)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.from_state)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.from_state.tostring())
      buff.write(_struct_i.pack(self.action))
      length = len(self.to_state)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.to_state.tostring())
      _x = self
      buff.write(_struct_fB.pack(_x.reward, _x.terminal))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.from_state = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (self.action,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.to_state = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 5
      (_x.reward, _x.terminal,) = _struct_fB.unpack(str[start:end])
      self.terminal = bool(self.terminal)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
_struct_fB = struct.Struct("<fB")
