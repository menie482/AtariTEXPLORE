/* Auto-generated by genmsg_cpp for file /home/cdonahue/research/svn/rl-texplore-ros-pkg/stacks/reinforcement_learning/rl_msgs/msg/RLStateReward.msg */
#ifndef RL_MSGS_MESSAGE_RLSTATEREWARD_H
#define RL_MSGS_MESSAGE_RLSTATEREWARD_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace rl_msgs
{
template <class ContainerAllocator>
struct RLStateReward_ {
  typedef RLStateReward_<ContainerAllocator> Type;

  RLStateReward_()
  : state()
  , reward(0.0)
  , terminal(false)
  {
  }

  RLStateReward_(const ContainerAllocator& _alloc)
  : state(_alloc)
  , reward(0.0)
  , terminal(false)
  {
  }

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _state_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  state;

  typedef float _reward_type;
  float reward;

  typedef uint8_t _terminal_type;
  uint8_t terminal;


  typedef boost::shared_ptr< ::rl_msgs::RLStateReward_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rl_msgs::RLStateReward_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct RLStateReward
typedef  ::rl_msgs::RLStateReward_<std::allocator<void> > RLStateReward;

typedef boost::shared_ptr< ::rl_msgs::RLStateReward> RLStateRewardPtr;
typedef boost::shared_ptr< ::rl_msgs::RLStateReward const> RLStateRewardConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rl_msgs::RLStateReward_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rl_msgs::RLStateReward_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rl_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rl_msgs::RLStateReward_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rl_msgs::RLStateReward_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rl_msgs::RLStateReward_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d7e0cc8b9cf2889f09d7f096a11a2873";
  }

  static const char* value(const  ::rl_msgs::RLStateReward_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd7e0cc8b9cf2889fULL;
  static const uint64_t static_value2 = 0x09d7f096a11a2873ULL;
};

template<class ContainerAllocator>
struct DataType< ::rl_msgs::RLStateReward_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rl_msgs/RLStateReward";
  }

  static const char* value(const  ::rl_msgs::RLStateReward_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rl_msgs::RLStateReward_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Message for returning the current sensation vector \n\
# (i.e. state or observation or sensor readings) and a\n\
# reward from an  environment\n\
\n\
float32[] state\n\
float32 reward\n\
bool terminal\n\
";
  }

  static const char* value(const  ::rl_msgs::RLStateReward_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rl_msgs::RLStateReward_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.state);
    stream.next(m.reward);
    stream.next(m.terminal);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RLStateReward_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rl_msgs::RLStateReward_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rl_msgs::RLStateReward_<ContainerAllocator> & v) 
  {
    s << indent << "state[]" << std::endl;
    for (size_t i = 0; i < v.state.size(); ++i)
    {
      s << indent << "  state[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.state[i]);
    }
    s << indent << "reward: ";
    Printer<float>::stream(s, indent + "  ", v.reward);
    s << indent << "terminal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.terminal);
  }
};


} // namespace message_operations
} // namespace ros

#endif // RL_MSGS_MESSAGE_RLSTATEREWARD_H

