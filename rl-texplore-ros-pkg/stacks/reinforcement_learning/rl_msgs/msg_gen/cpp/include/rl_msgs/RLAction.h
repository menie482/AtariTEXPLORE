/* Auto-generated by genmsg_cpp for file /home/cdonahue/research/svn/rl-texplore-ros-pkg/stacks/reinforcement_learning/rl_msgs/msg/RLAction.msg */
#ifndef RL_MSGS_MESSAGE_RLACTION_H
#define RL_MSGS_MESSAGE_RLACTION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace rl_msgs
{
template <class ContainerAllocator>
struct RLAction_ {
  typedef RLAction_<ContainerAllocator> Type;

  RLAction_()
  : action(0)
  {
  }

  RLAction_(const ContainerAllocator& _alloc)
  : action(0)
  {
  }

  typedef int32_t _action_type;
  int32_t action;


  typedef boost::shared_ptr< ::rl_msgs::RLAction_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rl_msgs::RLAction_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct RLAction
typedef  ::rl_msgs::RLAction_<std::allocator<void> > RLAction;

typedef boost::shared_ptr< ::rl_msgs::RLAction> RLActionPtr;
typedef boost::shared_ptr< ::rl_msgs::RLAction const> RLActionConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rl_msgs::RLAction_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rl_msgs::RLAction_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rl_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rl_msgs::RLAction_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rl_msgs::RLAction_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rl_msgs::RLAction_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b028501ac85c840a01d50342b4cc9b6e";
  }

  static const char* value(const  ::rl_msgs::RLAction_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb028501ac85c840aULL;
  static const uint64_t static_value2 = 0x01d50342b4cc9b6eULL;
};

template<class ContainerAllocator>
struct DataType< ::rl_msgs::RLAction_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rl_msgs/RLAction";
  }

  static const char* value(const  ::rl_msgs::RLAction_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rl_msgs::RLAction_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Message for describing an action in RL\n\
\n\
int32 action\n\
\n\
";
  }

  static const char* value(const  ::rl_msgs::RLAction_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::rl_msgs::RLAction_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rl_msgs::RLAction_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.action);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RLAction_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rl_msgs::RLAction_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rl_msgs::RLAction_<ContainerAllocator> & v) 
  {
    s << indent << "action: ";
    Printer<int32_t>::stream(s, indent + "  ", v.action);
  }
};


} // namespace message_operations
} // namespace ros

#endif // RL_MSGS_MESSAGE_RLACTION_H

