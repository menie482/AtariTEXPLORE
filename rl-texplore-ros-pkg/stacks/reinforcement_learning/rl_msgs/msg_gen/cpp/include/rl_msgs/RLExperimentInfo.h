/* Auto-generated by genmsg_cpp for file /home/cdonahue/research/svn/rl-texplore-ros-pkg/stacks/reinforcement_learning/rl_msgs/msg/RLExperimentInfo.msg */
#ifndef RL_MSGS_MESSAGE_RLEXPERIMENTINFO_H
#define RL_MSGS_MESSAGE_RLEXPERIMENTINFO_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace rl_msgs
{
template <class ContainerAllocator>
struct RLExperimentInfo_ {
  typedef RLExperimentInfo_<ContainerAllocator> Type;

  RLExperimentInfo_()
  : episode_number(0)
  , episode_reward(0.0)
  , number_actions(0)
  {
  }

  RLExperimentInfo_(const ContainerAllocator& _alloc)
  : episode_number(0)
  , episode_reward(0.0)
  , number_actions(0)
  {
  }

  typedef int32_t _episode_number_type;
  int32_t episode_number;

  typedef float _episode_reward_type;
  float episode_reward;

  typedef int32_t _number_actions_type;
  int32_t number_actions;


  typedef boost::shared_ptr< ::rl_msgs::RLExperimentInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rl_msgs::RLExperimentInfo_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct RLExperimentInfo
typedef  ::rl_msgs::RLExperimentInfo_<std::allocator<void> > RLExperimentInfo;

typedef boost::shared_ptr< ::rl_msgs::RLExperimentInfo> RLExperimentInfoPtr;
typedef boost::shared_ptr< ::rl_msgs::RLExperimentInfo const> RLExperimentInfoConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rl_msgs::RLExperimentInfo_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rl_msgs::RLExperimentInfo_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rl_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rl_msgs::RLExperimentInfo_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rl_msgs::RLExperimentInfo_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rl_msgs::RLExperimentInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "df389dab0f017dc2a66e6cedd44b7a1e";
  }

  static const char* value(const  ::rl_msgs::RLExperimentInfo_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xdf389dab0f017dc2ULL;
  static const uint64_t static_value2 = 0xa66e6cedd44b7a1eULL;
};

template<class ContainerAllocator>
struct DataType< ::rl_msgs::RLExperimentInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rl_msgs/RLExperimentInfo";
  }

  static const char* value(const  ::rl_msgs::RLExperimentInfo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rl_msgs::RLExperimentInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Message displaying / plotting / printing info about experiments\n\
\n\
int32 episode_number\n\
float32 episode_reward\n\
\n\
int32 number_actions\n\
\n\
";
  }

  static const char* value(const  ::rl_msgs::RLExperimentInfo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::rl_msgs::RLExperimentInfo_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rl_msgs::RLExperimentInfo_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.episode_number);
    stream.next(m.episode_reward);
    stream.next(m.number_actions);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RLExperimentInfo_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rl_msgs::RLExperimentInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rl_msgs::RLExperimentInfo_<ContainerAllocator> & v) 
  {
    s << indent << "episode_number: ";
    Printer<int32_t>::stream(s, indent + "  ", v.episode_number);
    s << indent << "episode_reward: ";
    Printer<float>::stream(s, indent + "  ", v.episode_reward);
    s << indent << "number_actions: ";
    Printer<int32_t>::stream(s, indent + "  ", v.number_actions);
  }
};


} // namespace message_operations
} // namespace ros

#endif // RL_MSGS_MESSAGE_RLEXPERIMENTINFO_H

