STATE OF THINGS:
    Modeltypes ARE being passed from modelSpecs
    Rollouts at some absurdly limited depth for simple state space

TODO SOON:
	try extreme lambda values between 0 and 1
	modelSpecs reward and terminal tree in FactoredModel
	can discretize each feature individually

DEBUG TODO:
    Test other TEXPLORE given examples and compare with Todd's results from the paper

TEXPLORE TODO:
    Pass split structure through modelSpecs (which features in the model to have absolute vs relative splits, suggested values for those splits...)
    Detect whether or not to pass certain training experiences to certain features
    Print decision trees to see what's going on
    Improve fault tolerance and sensor delay, reject certain samples that aren't of some threshold of consistency?
    Don't recreate trees on missed prediction
    Suggest certain splits for decision tree (on variable values)

STATE SPACE TODO:
    Pos/neg x-vel, y-vel features?
    Think of a way to make this adapt better to relative decision tree framework
    Add nearest n object radar (or other type if I think of it)
    Add map # feature
    Frames since start
    Discretize x,y coordinates?
    Don't learn on radar jumps
    Think about how to deal with idle frames for games that require multiple presses to move certain directions
    Check if objects are always delivered in the same order for radar consistency when two objects are same distance

VISUAL PROCESSING TODO:
    Don't remove object after 50 idle frames if it matches the self object
    Switch back to automatic recognition... maybe...

TESTING TODO:
    Submit no GUI version to condor
    Many training episodes and then a few evaluation episods
    More gaemz!
